#include "global_arithmetic.h"

Arithmetic_Codec acodec;
Adaptive_Data_Model aColor;
Adaptive_Data_Model a3OT_L(3);
Adaptive_Data_Model a3OT_A(3);
Adaptive_Data_Model a3OT_B(3);
Adaptive_Data_Model a3OT_R(3);
Adaptive_Data_Model a3OT_0(3);
Adaptive_Data_Model a3OT_1(3);
Adaptive_Data_Model a3OT_2(3);
Adaptive_Data_Model a3OT_00(3);
Adaptive_Data_Model a3OT_01(3);
Adaptive_Data_Model a3OT_02(3);
Adaptive_Data_Model a3OT_10(3);
Adaptive_Data_Model a3OT_11(3);
Adaptive_Data_Model a3OT_12(3);
Adaptive_Data_Model a3OT_20(3);
Adaptive_Data_Model a3OT_21(3);
Adaptive_Data_Model a3OT_22(3);
Adaptive_Data_Model a3OT_000(3);
Adaptive_Data_Model a3OT_001(3);
Adaptive_Data_Model a3OT_002(3);
Adaptive_Data_Model a3OT_010(3);
Adaptive_Data_Model a3OT_011(3);
Adaptive_Data_Model a3OT_012(3);
Adaptive_Data_Model a3OT_020(3);
Adaptive_Data_Model a3OT_021(3);
Adaptive_Data_Model a3OT_022(3);
Adaptive_Data_Model a3OT_100(3);
Adaptive_Data_Model a3OT_101(3);
Adaptive_Data_Model a3OT_102(3);
Adaptive_Data_Model a3OT_110(3);
Adaptive_Data_Model a3OT_111(3);
Adaptive_Data_Model a3OT_112(3);
Adaptive_Data_Model a3OT_120(3);
Adaptive_Data_Model a3OT_121(3);
Adaptive_Data_Model a3OT_122(3);
Adaptive_Data_Model a3OT_200(3);
Adaptive_Data_Model a3OT_201(3);
Adaptive_Data_Model a3OT_202(3);
Adaptive_Data_Model a3OT_210(3);
Adaptive_Data_Model a3OT_211(3);
Adaptive_Data_Model a3OT_212(3);
Adaptive_Data_Model a3OT_220(3);
Adaptive_Data_Model a3OT_221(3);
Adaptive_Data_Model a3OT_222(3);
Adaptive_Data_Model aPredictPositionMode(3);
Adaptive_Data_Model aSideMode(4);
Adaptive_Data_Model aChainPositionMode2x2(6);
Adaptive_Bit_Model ahead;
Adaptive_Bit_Model aSplitFlag1;
Adaptive_Bit_Model aSplitFlag2;
Adaptive_Bit_Model aSplitFlag3;
Adaptive_Bit_Model aOneColorFlag;
Adaptive_Bit_Model aPredictColor1Flag;
Adaptive_Bit_Model aPredictColor1Flag2;
Adaptive_Bit_Model aPredictColor2Flag;
Adaptive_Bit_Model aContinueEdgeFlag;
Adaptive_Bit_Model aPredictPosition;
Adaptive_Bit_Model aPredictPositionFlag;
Adaptive_Bit_Model aPredictPositionBorder;
Adaptive_Bit_Model aPredictPositionSide;
Adaptive_Bit_Model aGolomb;
Adaptive_Bit_Model aNoResidue;
Adaptive_Bit_Model aSameFlag;

bool g_biValue;
int g_max_CU = 128;
int g_min_CU = 2;
int g_RO_size;
int* depthMap;
int numC;
int* colorList;

int InterMode = 0;
int g_search_range = 64;
int g_max_inter = 128;
int g_min_inter = 4;
unsigned char* ref_frame = NULL;

int mask_flag = 0;
unsigned char* mask = NULL;

int g_offset = 0;
float g_rate = 0;
float g_scale = 100;
float g_CTU_scale = 1;

void reset_arithmetic()
{
  aColor.reset();
  a3OT_L.reset();
  a3OT_A.reset();
  a3OT_B.reset();
  a3OT_R.reset();
  a3OT_0.reset();
  a3OT_1.reset();
  a3OT_2.reset();
  a3OT_00.reset();
  a3OT_01.reset();
  a3OT_02.reset();
  a3OT_10.reset();
  a3OT_11.reset();
  a3OT_12.reset();
  a3OT_20.reset();
  a3OT_21.reset();
  a3OT_22.reset();
  a3OT_000.reset();
  a3OT_001.reset();
  a3OT_002.reset();
  a3OT_010.reset();
  a3OT_011.reset();
  a3OT_012.reset();
  a3OT_020.reset();
  a3OT_021.reset();
  a3OT_022.reset();
  a3OT_100.reset();
  a3OT_101.reset();
  a3OT_102.reset();
  a3OT_110.reset();
  a3OT_111.reset();
  a3OT_112.reset();
  a3OT_120.reset();
  a3OT_121.reset();
  a3OT_122.reset();
  a3OT_200.reset();
  a3OT_201.reset();
  a3OT_202.reset();
  a3OT_210.reset();
  a3OT_211.reset();
  a3OT_212.reset();
  a3OT_220.reset();
  a3OT_221.reset();
  a3OT_222.reset();
  aPredictPositionMode.reset();
  aSideMode.reset();
  aChainPositionMode2x2.reset();
  aSplitFlag1.reset();
  aSplitFlag2.reset();
  aSplitFlag3.reset();
  aOneColorFlag.reset();
  aPredictColor1Flag.reset();
  aPredictColor1Flag2.reset();
  aPredictColor2Flag.reset();
  aContinueEdgeFlag.reset();
  aPredictPosition.reset();
  aPredictPositionFlag.reset();
  aPredictPositionBorder.reset();
  aPredictPositionSide.reset();
  aGolomb.reset();
  aNoResidue.reset();
  aSameFlag.reset();
  g_rate = 0;
  g_CTU_scale = 1;

  float a3OT_Lpro[3] = { 0.4, 0.5, 0.1 }; a3OT_L.setPro(a3OT_Lpro);
  float a3OT_Apro[3] = { 0.4, 0.5, 0.1 }; a3OT_A.setPro(a3OT_Apro);
  float a3OT_Bpro[3] = { 0.2, 0.7, 0.1 }; a3OT_B.setPro(a3OT_Bpro);
  float a3OT_Rpro[3] = { 0.4, 0.5, 0.1 }; a3OT_R.setPro(a3OT_Rpro);
  float a3OT_0pro[3] = { 0.6, 0.3, 0.1 }; a3OT_0.setPro(a3OT_0pro);
  float a3OT_1pro[3] = { 0.4, 0.5, 0.1 }; a3OT_1.setPro(a3OT_1pro);
  float a3OT_2pro[3] = { 0.5, 0.4, 0.1 }; a3OT_2.setPro(a3OT_2pro);
  float a3OT_00pro[3] = { 0.7, 0.2, 0.1 }; a3OT_00.setPro(a3OT_00pro);
  float a3OT_01pro[3] = { 0.1, 0.8, 0.1 }; a3OT_01.setPro(a3OT_01pro);
  float a3OT_10pro[3] = { 0.5, 0.4, 0.1 }; a3OT_10.setPro(a3OT_10pro);
  float a3OT_11pro[3] = { 0.4, 0.5, 0.1 }; a3OT_11.setPro(a3OT_11pro);
  float a3OT_20pro[3] = { 0.7, 0.2, 0.1 }; a3OT_20.setPro(a3OT_20pro);
  float a3OT_000pro[3] = { 0.8, 0.1, 0.1 }; a3OT_000.setPro(a3OT_000pro);
  float a3OT_001pro[3] = { 0.1, 0.8, 0.1 }; a3OT_001.setPro(a3OT_001pro);
  float a3OT_002pro[3] = { 0.1, 0.8, 0.1 }; a3OT_002.setPro(a3OT_002pro);
  float a3OT_010pro[3] = { 0.6, 0.2, 0.2 }; a3OT_010.setPro(a3OT_010pro);
  float a3OT_011pro[3] = { 0.7, 0.2, 0.1 }; a3OT_011.setPro(a3OT_011pro);
  float a3OT_012pro[3] = { 0.4, 0.5, 0.1 }; a3OT_012.setPro(a3OT_012pro);
  float a3OT_020pro[3] = { 0.7, 0.2, 0.1 }; a3OT_020.setPro(a3OT_020pro);
  float a3OT_021pro[3] = { 0.6, 0.3, 0.1 }; a3OT_021.setPro(a3OT_021pro);
  float a3OT_100pro[3] = { 0.6, 0.3, 0.1 }; a3OT_100.setPro(a3OT_100pro);
  float a3OT_101pro[3] = { 0.1, 0.8, 0.1 }; a3OT_101.setPro(a3OT_101pro);
  float a3OT_102pro[3] = { 0.2, 0.7, 0.1 }; a3OT_102.setPro(a3OT_102pro);
  float a3OT_110pro[3] = { 0.5, 0.4, 0.1 }; a3OT_110.setPro(a3OT_110pro);
  float a3OT_111pro[3] = { 0.2, 0.7, 0.1 }; a3OT_111.setPro(a3OT_111pro);
  float a3OT_112pro[3] = { 0.3, 0.6, 0.1 }; a3OT_112.setPro(a3OT_112pro);
  float a3OT_120pro[3] = { 0.6, 0.3, 0.1 }; a3OT_120.setPro(a3OT_120pro);
  float a3OT_121pro[3] = { 0.3, 0.6, 0.1 }; a3OT_121.setPro(a3OT_121pro);
  float a3OT_200pro[3] = { 0.8, 0.1, 0.1 }; a3OT_200.setPro(a3OT_200pro);
  float a3OT_201pro[3] = { 0.1, 0.8, 0.1 }; a3OT_201.setPro(a3OT_201pro);
  float a3OT_210pro[3] = { 0.7, 0.2, 0.1 }; a3OT_210.setPro(a3OT_210pro);
  float a3OT_211pro[3] = { 0.3, 0.6, 0.1 }; a3OT_211.setPro(a3OT_211pro);
  float aPredictPositionModepro[3] = {0.7, 0.1, 0.2}; aPredictPositionMode.setPro(aPredictPositionModepro);
  float aSplitFlag1pro = 0.8; aSplitFlag1.setPro(aSplitFlag1pro);
  float aSplitFlag3pro = 0.2; aSplitFlag3.setPro(aSplitFlag3pro);
  float aPredictColor1Flagpro = 0.1; aPredictColor1Flag.setPro(aPredictColor1Flagpro);
  float aPredictColor1Flag2pro = 0.1; aPredictColor1Flag2.setPro(aPredictColor1Flag2pro);
  float aPredictColor2Flagpro = 0.1; aPredictColor2Flag.setPro(aPredictColor2Flagpro);
  float aContinueEdgeFlagpro = 0.2; aContinueEdgeFlag.setPro(aContinueEdgeFlagpro);
  float aPredictPositionFlagpro = 0.1; aPredictPositionFlag.setPro(aPredictPositionFlagpro);
  float aPredictPositionBorderpro = 0.8; aPredictPositionBorder.setPro(aPredictPositionBorderpro);
  float aPredictPositionSidepro = 0.8; aPredictPositionSide.setPro(aPredictPositionSidepro);

}

AC::AC(void)
{
	aColor = new int[numC + 1 + 4 * 43 + 4 * 1 + 5 + 7 + 3 * 15 + numC];  //numC + 1 + 7*16 + 4*2 + 5 + 6*4 +4*3 + 7 + 3*12 + numC
	a3OT_L = aColor + numC + 1;
	a3OT_A = a3OT_L + 4;
	a3OT_B = a3OT_A + 4;
	a3OT_R = a3OT_B + 4;
	a3OT_0 = a3OT_R + 4;
	a3OT_1 = a3OT_0 + 4;
	a3OT_2 = a3OT_1 + 4;
	a3OT_00 = a3OT_2 + 4;
	a3OT_01 = a3OT_00 + 4;
	a3OT_02 = a3OT_01 + 4;
	a3OT_10 = a3OT_02 + 4;
	a3OT_11 = a3OT_10 + 4;
	a3OT_12 = a3OT_11 + 4;
	a3OT_20 = a3OT_12 + 4;
	a3OT_21 = a3OT_20 + 4;
	a3OT_22 = a3OT_21 + 4;
	a3OT_000 = a3OT_22 + 4;
	a3OT_001 = a3OT_000 + 4;
	a3OT_002 = a3OT_001 + 4;
	a3OT_010 = a3OT_002 + 4;
	a3OT_011 = a3OT_010 + 4;
	a3OT_012 = a3OT_011 + 4;
	a3OT_020 = a3OT_012 + 4;
	a3OT_021 = a3OT_020 + 4;
	a3OT_022 = a3OT_021 + 4;
	a3OT_100 = a3OT_022 + 4;
	a3OT_101 = a3OT_100 + 4;
	a3OT_102 = a3OT_101 + 4;
	a3OT_110 = a3OT_102 + 4;
	a3OT_111 = a3OT_110 + 4;
	a3OT_112 = a3OT_111 + 4;
	a3OT_120 = a3OT_112 + 4;
	a3OT_121 = a3OT_120 + 4;
	a3OT_122 = a3OT_121 + 4;
	a3OT_200 = a3OT_122 + 4;
	a3OT_201 = a3OT_200 + 4;
	a3OT_202 = a3OT_201 + 4;
	a3OT_210 = a3OT_202 + 4;
	a3OT_211 = a3OT_210 + 4;
	a3OT_212 = a3OT_211 + 4;
	a3OT_220 = a3OT_212 + 4;
	a3OT_221 = a3OT_220 + 4;
	a3OT_222 = a3OT_221 + 4;
	aPredictPositionMode = a3OT_222 + 4;
	aSideMode = aPredictPositionMode + 4;
	aChainPositionMode2x2 = aSideMode + 5;
	aSplitFlag1 = aChainPositionMode2x2 + 7;
	aSplitFlag2 = aSplitFlag1 + 3;
	aSplitFlag3 = aSplitFlag2 + 3;
	aOneColorFlag = aSplitFlag3 + 3;
	aPredictColor1Flag = aOneColorFlag + 3;
	aPredictColor1Flag2 = aPredictColor1Flag + 3;
	aPredictColor2Flag = aPredictColor1Flag2 + 3;
	aContinueEdgeFlag = aPredictColor2Flag + 3;
	aPredictPosition = aContinueEdgeFlag + 3;
	aPredictPositionFlag = aPredictPosition + 3;
	aPredictPositionBorder = aPredictPositionFlag + 3;
	aPredictPositionSide = aPredictPositionBorder + 3;
	aGolomb = aPredictPositionSide + 3;
	aNoResidue = aGolomb + 3;
	aSameFlag = aNoResidue + 3;
	colorList = aSameFlag + 3;

	for (int i = 0; i < numC + 1 + 4 * 43 + 4 * 1 + 5 + 7 + 3 * 15 + numC; i++)
	{
		aColor[i] = 1;
	}
	aColor[0] = numC;
	a3OT_L[0] = 3;
	a3OT_A[0] = 3;
	a3OT_B[0] = 3;
	a3OT_R[0] = 3;
	a3OT_0[0] = 3;
	a3OT_1[0] = 3;
	a3OT_2[0] = 3;
	a3OT_00[0] = 3;
	a3OT_01[0] = 3;
	a3OT_02[0] = 3;
	a3OT_10[0] = 3;
	a3OT_11[0] = 3;
	a3OT_12[0] = 3;
	a3OT_20[0] = 3;
	a3OT_21[0] = 3;
	a3OT_22[0] = 3;
	a3OT_000[0] = 3;
	a3OT_001[0] = 3;
	a3OT_002[0] = 3;
	a3OT_010[0] = 3;
	a3OT_011[0] = 3;
	a3OT_012[0] = 3;
	a3OT_020[0] = 3;
	a3OT_021[0] = 3;
	a3OT_022[0] = 3;
	a3OT_100[0] = 3;
	a3OT_101[0] = 3;
	a3OT_102[0] = 3;
	a3OT_110[0] = 3;
	a3OT_111[0] = 3;
	a3OT_112[0] = 3;
	a3OT_120[0] = 3;
	a3OT_121[0] = 3;
	a3OT_122[0] = 3;
	a3OT_200[0] = 3;
	a3OT_201[0] = 3;
	a3OT_202[0] = 3;
	a3OT_210[0] = 3;
	a3OT_211[0] = 3;
	a3OT_212[0] = 3;
	a3OT_220[0] = 3;
	a3OT_221[0] = 3;
	a3OT_222[0] = 3;
	aPredictPositionMode[0] = 3;
	aSideMode[0] = 4;
	aChainPositionMode2x2[0] = 6;
	aSplitFlag1[0] = 2;
	aSplitFlag2[0] = 2;
	aSplitFlag3[0] = 2;
	aOneColorFlag[0] = 2;
	aPredictColor1Flag[0] = 2;
	aPredictColor1Flag2[0] = 2;
	aPredictColor2Flag[0] = 2;
	aContinueEdgeFlag[0] = 2;
	aPredictPosition[0] = 2;
	aPredictPositionFlag[0] = 2;
	aPredictPositionBorder[0] = 2;
	aPredictPositionSide[0] = 2;
	aGolomb[0] = 2;
	aNoResidue[0] = 2;
	aSameFlag[0] = 2;

	a3OT_L[0] = 10; a3OT_L[1] = 4; a3OT_L[2] = 5; a3OT_L[3] = 1;
	a3OT_A[0] = 10; a3OT_A[1] = 4; a3OT_A[2] = 5; a3OT_A[3] = 1;
	a3OT_B[0] = 10; a3OT_B[1] = 2; a3OT_B[2] = 7; a3OT_B[3] = 1;
	a3OT_R[0] = 10; a3OT_R[1] = 4; a3OT_R[2] = 5; a3OT_R[3] = 1;
	a3OT_0[0] = 10; a3OT_0[1] = 6; a3OT_0[2] = 3; a3OT_0[3] = 1;
	a3OT_1[0] = 10; a3OT_1[1] = 4; a3OT_1[2] = 5; a3OT_1[3] = 1;
	a3OT_2[0] = 10; a3OT_2[1] = 5; a3OT_2[2] = 4; a3OT_2[3] = 1;
	a3OT_00[0] = 10; a3OT_00[1] = 7; a3OT_00[2] = 2; a3OT_00[3] = 1;
	a3OT_01[0] = 10; a3OT_01[1] = 1; a3OT_01[2] = 8; a3OT_01[3] = 1;
	a3OT_10[0] = 10; a3OT_10[1] = 5; a3OT_10[2] = 4; a3OT_10[3] = 1;
	a3OT_11[0] = 10; a3OT_11[1] = 4; a3OT_11[2] = 5; a3OT_11[3] = 1;
	a3OT_20[0] = 10; a3OT_20[1] = 7; a3OT_20[2] = 2; a3OT_20[3] = 1;
	a3OT_000[0] = 10; a3OT_000[1] = 8; a3OT_000[2] = 1; a3OT_000[3] = 1;
	a3OT_001[0] = 10; a3OT_001[1] = 1; a3OT_001[2] = 8; a3OT_001[3] = 1;
	a3OT_002[0] = 10; a3OT_002[1] = 1; a3OT_002[2] = 8; a3OT_002[3] = 1;
	a3OT_010[0] = 10; a3OT_010[1] = 6; a3OT_010[2] = 2; a3OT_010[3] = 2;
	a3OT_011[0] = 10; a3OT_011[1] = 7; a3OT_011[2] = 2; a3OT_011[3] = 1;
	a3OT_012[0] = 10; a3OT_012[1] = 4; a3OT_012[2] = 5; a3OT_012[3] = 1;
	a3OT_020[0] = 10; a3OT_020[1] = 7; a3OT_020[2] = 2; a3OT_020[3] = 1;
	a3OT_021[0] = 10; a3OT_021[1] = 6; a3OT_021[2] = 3; a3OT_021[3] = 1;
	a3OT_100[0] = 10; a3OT_100[1] = 6; a3OT_100[2] = 3; a3OT_100[3] = 1;
	a3OT_101[0] = 10; a3OT_101[1] = 1; a3OT_101[2] = 8; a3OT_101[3] = 1;
	a3OT_102[0] = 10; a3OT_102[1] = 2; a3OT_102[2] = 7; a3OT_102[3] = 1;
	a3OT_110[0] = 10; a3OT_110[1] = 5; a3OT_110[2] = 4; a3OT_110[3] = 1;
	a3OT_111[0] = 10; a3OT_111[1] = 2; a3OT_111[2] = 7; a3OT_111[3] = 1;
	a3OT_112[0] = 10; a3OT_112[1] = 3; a3OT_112[2] = 6; a3OT_112[3] = 1;
	a3OT_120[0] = 10; a3OT_120[1] = 6; a3OT_120[2] = 3; a3OT_120[3] = 1;
	a3OT_121[0] = 10; a3OT_121[1] = 3; a3OT_121[2] = 6; a3OT_121[3] = 1;
	a3OT_200[0] = 10; a3OT_200[1] = 8; a3OT_200[2] = 1; a3OT_200[3] = 1;
	a3OT_201[0] = 10; a3OT_201[1] = 1; a3OT_201[2] = 8; a3OT_201[3] = 1;
	a3OT_210[0] = 10; a3OT_210[1] = 7; a3OT_210[2] = 2; a3OT_210[3] = 1;
	a3OT_211[0] = 10; a3OT_211[1] = 3; a3OT_211[2] = 6; a3OT_211[3] = 1;
	aPredictPositionMode[0] = 10; aPredictPositionMode[1] = 7; aPredictPositionMode[2] = 1; aPredictPositionMode[3] = 2;
	aSplitFlag1[0] = 10; aSplitFlag1[1] = 8; aSplitFlag1[2] = 2;
	aSplitFlag3[0] = 10; aSplitFlag3[1] = 2; aSplitFlag3[2] = 8;
	aPredictColor1Flag[0] = 10; aPredictColor1Flag[1] = 1; aPredictColor1Flag[2] = 9;
	aPredictColor1Flag2[0] = 10; aPredictColor1Flag2[1] = 1; aPredictColor1Flag2[2] = 9;
	aPredictColor2Flag[0] = 10; aPredictColor2Flag[1] = 1; aPredictColor2Flag[2] = 9;
	aContinueEdgeFlag[0] = 10; aContinueEdgeFlag[1] = 2; aContinueEdgeFlag[2] = 8;
	aPredictPositionFlag[0] = 10; aPredictPositionFlag[1] = 1; aPredictPositionFlag[2] = 9;
	aPredictPositionBorder[0] = 10; aPredictPositionBorder[1] = 8; aPredictPositionBorder[2] = 2;
	aPredictPositionSide[0] = 10; aPredictPositionSide[1] = 8; aPredictPositionSide[2] = 2;

	for (int i = 0; i < numC; i++)
	{
		colorList[i] = i;
	}
}

AC::~AC()
{
	delete[] aColor;
}

void AC::copy(AC* element)
{
	for (int i = 0; i < numC + 1 + 4 * 43 + 4 * 1 + 5 + 7 + 3 * 15 + numC; i++)
	{
		this->aColor[i] = element->aColor[i];
	}
}