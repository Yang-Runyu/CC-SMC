#pragma once
#include "arithmetic_codec.h"

extern Arithmetic_Codec acodec;
extern Adaptive_Data_Model aColor;
extern Adaptive_Data_Model a3OT_L;
extern Adaptive_Data_Model a3OT_A;
extern Adaptive_Data_Model a3OT_B;
extern Adaptive_Data_Model a3OT_R;
extern Adaptive_Data_Model a3OT_0;
extern Adaptive_Data_Model a3OT_1;
extern Adaptive_Data_Model a3OT_2;
extern Adaptive_Data_Model a3OT_00;
extern Adaptive_Data_Model a3OT_01;
extern Adaptive_Data_Model a3OT_02;
extern Adaptive_Data_Model a3OT_10;
extern Adaptive_Data_Model a3OT_11;
extern Adaptive_Data_Model a3OT_12;
extern Adaptive_Data_Model a3OT_20;
extern Adaptive_Data_Model a3OT_21;
extern Adaptive_Data_Model a3OT_22;
extern Adaptive_Data_Model a3OT_000;
extern Adaptive_Data_Model a3OT_001;
extern Adaptive_Data_Model a3OT_002;
extern Adaptive_Data_Model a3OT_010;
extern Adaptive_Data_Model a3OT_011;
extern Adaptive_Data_Model a3OT_012;
extern Adaptive_Data_Model a3OT_020;
extern Adaptive_Data_Model a3OT_021;
extern Adaptive_Data_Model a3OT_022;
extern Adaptive_Data_Model a3OT_100;
extern Adaptive_Data_Model a3OT_101;
extern Adaptive_Data_Model a3OT_102;
extern Adaptive_Data_Model a3OT_110;
extern Adaptive_Data_Model a3OT_111;
extern Adaptive_Data_Model a3OT_112;
extern Adaptive_Data_Model a3OT_120;
extern Adaptive_Data_Model a3OT_121;
extern Adaptive_Data_Model a3OT_122;
extern Adaptive_Data_Model a3OT_200;
extern Adaptive_Data_Model a3OT_201;
extern Adaptive_Data_Model a3OT_202;
extern Adaptive_Data_Model a3OT_210;
extern Adaptive_Data_Model a3OT_211;
extern Adaptive_Data_Model a3OT_212;
extern Adaptive_Data_Model a3OT_220;
extern Adaptive_Data_Model a3OT_221;
extern Adaptive_Data_Model a3OT_222;
extern Adaptive_Data_Model aPredictPositionMode;
extern Adaptive_Data_Model aSideMode;
extern Adaptive_Data_Model aChainPositionMode2x2;
extern Adaptive_Bit_Model ahead;
extern Adaptive_Bit_Model aSplitFlag1;
extern Adaptive_Bit_Model aSplitFlag2;
extern Adaptive_Bit_Model aSplitFlag3;
extern Adaptive_Bit_Model aOneColorFlag;
extern Adaptive_Bit_Model aPredictColor1Flag;
extern Adaptive_Bit_Model aPredictColor1Flag2;
extern Adaptive_Bit_Model aPredictColor2Flag;
extern Adaptive_Bit_Model aContinueEdgeFlag;
extern Adaptive_Bit_Model aPredictPosition;
extern Adaptive_Bit_Model aPredictPositionFlag;
extern Adaptive_Bit_Model aPredictPositionBorder;
extern Adaptive_Bit_Model aPredictPositionSide;
extern Adaptive_Bit_Model aGolomb;
extern Adaptive_Bit_Model aNoResidue;
extern Adaptive_Bit_Model aSameFlag;

extern bool g_biValue;
extern int g_max_CU;
extern int g_min_CU;
extern int g_RO_size;
extern int* depthMap;
extern int numC;
extern int* colorList;

extern int InterMode;
extern int g_search_range;
extern int g_max_inter;
extern int g_min_inter;
extern unsigned char* ref_frame;

extern int mask_flag;
extern unsigned char* mask;

extern int g_offset;
extern float g_rate;
extern float g_scale;
extern float g_CTU_scale;

void reset_arithmetic();

class AC
{
public:
	AC();
	~AC();

	int* aColor;
	int* a3OT_L;
	int* a3OT_A;
	int* a3OT_B;
	int* a3OT_R;
	int* a3OT_0;
	int* a3OT_1;
	int* a3OT_2;
	int* a3OT_00;
	int* a3OT_01;
	int* a3OT_02;
	int* a3OT_10;
	int* a3OT_11;
	int* a3OT_12;
	int* a3OT_20;
	int* a3OT_21;
	int* a3OT_22;
	int* a3OT_000;
	int* a3OT_001;
	int* a3OT_002;
	int* a3OT_010;
	int* a3OT_011;
	int* a3OT_012;
	int* a3OT_020;
	int* a3OT_021;
	int* a3OT_022;
	int* a3OT_100;
	int* a3OT_101;
	int* a3OT_102;
	int* a3OT_110;
	int* a3OT_111;
	int* a3OT_112;
	int* a3OT_120;
	int* a3OT_121;
	int* a3OT_122;
	int* a3OT_200;
	int* a3OT_201;
	int* a3OT_202;
	int* a3OT_210;
	int* a3OT_211;
	int* a3OT_212;
	int* a3OT_220;
	int* a3OT_221;
	int* a3OT_222;
	int* aPredictPositionMode;
	int* aSideMode;
	int* aChainPositionMode2x2;
	int* aSplitFlag1;
	int* aSplitFlag2;
	int* aSplitFlag3;
	int* aOneColorFlag;
	int* aPredictColor1Flag;
	int* aPredictColor1Flag2;
	int* aPredictColor2Flag;
	int* aContinueEdgeFlag;
	int* aPredictPosition;
	int* aPredictPositionFlag;
	int* aPredictPositionBorder;
	int* aPredictPositionSide;
	int* aGolomb;
	int* aNoResidue;
	int* aSameFlag;
	int* colorList;

	void copy(AC* element);
};
