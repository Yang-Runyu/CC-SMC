<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>d:\semanticmapcoder\semanticmapcodingv7\source\commonlib</FILEPATH>
      <FILENAME>global_arithmetic.cpp</FILENAME>
      <LINE>188</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>AC::{ctor}</FUNCTION>
    <DECORATED>??0AC@@QEAA@XZ</DECORATED>
    <FUNCLINE>186</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>